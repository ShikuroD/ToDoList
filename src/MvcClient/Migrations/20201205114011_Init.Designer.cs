// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MvcClient.Migrations
{
    [DbContext(typeof(ToDoListContext))]
    [Migration("20201205114011_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("AppCore.Models.AttachedFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ToDoTaskId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToDoTaskId");

                    b.ToTable("AttachedFiles");
                });

            modelBuilder.Entity("AppCore.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ToDoTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToDoTaskId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AppCore.Models.DbLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Action")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ActionTarget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ChangeField")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExecDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExecUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TargetName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetScopeName")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetStatusName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ExecUserId");

                    b.ToTable("DbLogs");
                });

            modelBuilder.Entity("AppCore.Models.JointUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToDoTaskId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ToDoTaskId");

                    b.HasIndex("UserId", "ToDoTaskId")
                        .IsUnique();

                    b.ToTable("JointUsers");
                });

            modelBuilder.Entity("AppCore.Models.ToDoTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RegisteredUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT")
                        .HasAnnotation("MinLength", 3);

                    b.HasKey("Id");

                    b.HasIndex("RegisteredUserId");

                    b.ToTable("ToDoTasks");
                });

            modelBuilder.Entity("AppCore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasAnnotation("MinLength", 3);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasAnnotation("MinLength", 3);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasAnnotation("MinLength", 3);

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("TEXT")
                        .HasAnnotation("MinLength", 3);

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AppCore.Models.AttachedFile", b =>
                {
                    b.HasOne("AppCore.Models.ToDoTask", "ToDoTask")
                        .WithMany("AttachedFiles")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoTask");
                });

            modelBuilder.Entity("AppCore.Models.Comment", b =>
                {
                    b.HasOne("AppCore.Models.ToDoTask", "ToDoTask")
                        .WithMany("Comments")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCore.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppCore.Models.DbLog", b =>
                {
                    b.HasOne("AppCore.Models.User", "ExecUser")
                        .WithMany("DbLogs")
                        .HasForeignKey("ExecUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExecUser");
                });

            modelBuilder.Entity("AppCore.Models.JointUser", b =>
                {
                    b.HasOne("AppCore.Models.ToDoTask", "ToDoTask")
                        .WithMany("JointUsers")
                        .HasForeignKey("ToDoTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AppCore.Models.User", "User")
                        .WithMany("JointUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AppCore.Models.ToDoTask", b =>
                {
                    b.HasOne("AppCore.Models.User", "RegisteredUser")
                        .WithMany("ToDoTasks")
                        .HasForeignKey("RegisteredUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RegisteredUser");
                });

            modelBuilder.Entity("AppCore.Models.ToDoTask", b =>
                {
                    b.Navigation("AttachedFiles");

                    b.Navigation("Comments");

                    b.Navigation("JointUsers");
                });

            modelBuilder.Entity("AppCore.Models.User", b =>
                {
                    b.Navigation("DbLogs");

                    b.Navigation("JointUsers");

                    b.Navigation("ToDoTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
